version: 2 # use CircleCI 2.0
aliases:
  - &defaults
    working_directory: ~/lstn-dataflow # directory where steps will run
    docker:
      - image: circleci/openjdk:8-jdk-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment:
          GCS_DEV_DATAFLOW_BUCKET: lstn-in-dev-dataflow
  - &init-gcloud
    run:
      name: Prep gcloud
      command: |
        echo $GCLOUD_SERVICE_KEY_DEV > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud config set project ${GCLOUD_PROJECT_DEV}
        gcloud auth configure-docker --quiet
        gcloud info

  - &update-gcloud-components 
    run:
      name: update gcloud components 
      command: |
        apt-get update

  - &generate-and-set-version-env
    run: 
      name: Generate & set version
      command: |
        echo 'export VERSION=${CIRCLE_TAG//\./-}' >> $BASH_ENV
        source $BASH_ENV

  - &restore-cache
    restore_cache:
      key: lstn-dataflow-{{ checksum "pom.xml" }}

  - &save-cache
    save_cache:
      paths:
        - ~/.m2
      key: lstn-dataflow-{{ checksum "pom.xml" }}

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    <<: *defaults

    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - *restore-cache
      - run: mvn dependency:go-offline # gets the project dependencies
      - *save-cache
      - run: mvn package # run the actual tests
      - *generate-and-set-version-env
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
          path: target/surefire-reports
      
      - store_artifacts: # store the uberjar as an artifact
          path: target/lstn-dataflow-$VERSION-SNAPSHOT.jar

  deploy:
    <<: *defaults
    steps:
      - *restore-cache
      - *generate-and-set-version-env
      - run:
          name: Deploy dataflow template
          command: |
            mvn compile exec:java \
              -Dexec.mainClass=in.lstn.Podcasts \
              -Dexec.args="--runner=DataflowRunner \
                            --project=$GCLOUD_PROJECT_DEV \
                            --stagingLocation=gs://$GCS_DEV_DATAFLOW_BUCKET/staging \
                            --output=gs://$GCS_DEV_DATAFLOW_BUCKET/output \
                            --templateLocation=gs://$GCS_DEV_DATAFLOW_BUCKET/templates/podcasts"

workflows:
  version: 2
  test_suite:
    jobs:
      - build:
          filters:
            tags:
              ignore: /^lstn.*/

  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^lstn-dataflow.*/
            branches:
              ignore: /.*/

      - deploy:
          requires:
            - build
          filters: 
            tags:
              only: /^lstn-dataflow-v[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/  #lstn-dataflow-v[0:999].[0:999].[0:999]
            branches:
              ignore: /.*/